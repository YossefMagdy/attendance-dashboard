import * as moment from "moment/moment";
export class OutputData {
    outputObj = {};
    constructor(inputs) {
        inputs.forEach((el) => {
            switch (el.type) {
                case "search":
                case "text":
                case "tel":
                case "percintage":
                    this.outputObj[el.name] = "";
                    break;
                case "number":
                    this.outputObj[el.name] = undefined;
                    break;
                case "date":
                    if ((el.name.includes("date_to") ||
                        el.name.includes("startto") ||
                        el.name.includes("end_date") ||
                        el.name.includes("enddate") ||
                        el.name.includes("modified") ||
                        el.isStartDateToday == true) &&
                        el.ignoreStartDate != true) {
                        this.outputObj[el.name] = moment().toDate();
                    }
                    else if ((el.name.includes("date_from") ||
                        el.name.includes("startfrom") ||
                        el.name.includes("start_date") ||
                        el.name.includes("startdate") ||
                        el.name.includes("created")) &&
                        el.ignoreStartDate != true) {
                        this.outputObj[el.name] = moment().startOf("month").toDate();
                    }
                    else {
                        this.outputObj[el.name] = "";
                    }
                    break;
                case "dropdown":
                    if (el.hideClear)
                        this.outputObj[el.name] = null;
                    break;
                case "month":
                    this.outputObj[el.name] = moment().startOf("month").toDate();
                    break;
                case "multiSelect":
                    this.outputObj[el.name] = null;
                    break;
            }
        });
        return this.outputObj;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0RGF0YVZpZXdNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ltYWtlYXBwLXNoYXJlZC9zcmMvbGliL2NvbXBvbmVudHMvZ2VuZXJpYy1maWx0ZXIvVmlldy1Nb2RlbHMvb3V0cHV0RGF0YVZpZXdNb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxNQUFNLE9BQU8sVUFBVTtJQUNyQixTQUFTLEdBQVEsRUFBRSxDQUFDO0lBQ3BCLFlBQVksTUFBaUI7UUFFM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBRXBCLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRTtnQkFDZixLQUFLLFFBQVEsQ0FBQztnQkFDZCxLQUFLLE1BQU0sQ0FBQztnQkFDWixLQUFLLEtBQUssQ0FBQztnQkFDWCxLQUFLLFlBQVk7b0JBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUM3QixNQUFNO2dCQUVSLEtBQUssUUFBUTtvQkFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7b0JBQ3BDLE1BQU07Z0JBRVIsS0FBSyxNQUFNO29CQUNULElBQ0UsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7d0JBQzFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQzt3QkFDM0IsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO3dCQUM1QixFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7d0JBQzNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQzt3QkFDNUIsRUFBRSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQzt3QkFDOUIsRUFBRSxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQzFCO3dCQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO3FCQUM3Qzt5QkFBTSxJQUNMLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO3dCQUM1QixFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7d0JBQzdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQzt3QkFDOUIsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO3dCQUM3QixFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDOUIsRUFBRSxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQzFCO3dCQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztxQkFDOUQ7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO3FCQUM5QjtvQkFDRCxNQUFNO2dCQUVSLEtBQUssVUFBVTtvQkFDYixJQUFJLEVBQUUsQ0FBQyxTQUFTO3dCQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFFakQsTUFBTTtnQkFDUixLQUFLLE9BQU87b0JBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUM3RCxNQUFNO2dCQUNSLEtBQUssYUFBYTtvQkFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUMvQixNQUFNO2FBQ1Q7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJaW5wdXRzIH0gZnJvbSBcIi4uL0ludGVyZmFjZXMvaW5wdXRJbnRlcmZhY2VcIjtcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tIFwibW9tZW50L21vbWVudFwiO1xuZXhwb3J0IGNsYXNzIE91dHB1dERhdGEge1xuICBvdXRwdXRPYmo6IGFueSA9IHt9O1xuICBjb25zdHJ1Y3RvcihpbnB1dHM6IElpbnB1dHNbXSkge1xuIFxuICAgIGlucHV0cy5mb3JFYWNoKChlbCkgPT4ge1xuXG4gICAgICBzd2l0Y2ggKGVsLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInNlYXJjaFwiOlxuICAgICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICBjYXNlIFwidGVsXCI6XG4gICAgICAgIGNhc2UgXCJwZXJjaW50YWdlXCI6XG4gICAgICAgICAgdGhpcy5vdXRwdXRPYmpbZWwubmFtZV0gPSBcIlwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICB0aGlzLm91dHB1dE9ialtlbC5uYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChlbC5uYW1lLmluY2x1ZGVzKFwiZGF0ZV90b1wiKSB8fFxuICAgICAgICAgICAgICBlbC5uYW1lLmluY2x1ZGVzKFwic3RhcnR0b1wiKSB8fFxuICAgICAgICAgICAgICBlbC5uYW1lLmluY2x1ZGVzKFwiZW5kX2RhdGVcIikgfHxcbiAgICAgICAgICAgICAgZWwubmFtZS5pbmNsdWRlcyhcImVuZGRhdGVcIikgfHxcbiAgICAgICAgICAgICAgZWwubmFtZS5pbmNsdWRlcyhcIm1vZGlmaWVkXCIpICB8fFxuICAgICAgICAgICAgICBlbC5pc1N0YXJ0RGF0ZVRvZGF5ID09IHRydWUpICYmXG4gICAgICAgICAgICBlbC5pZ25vcmVTdGFydERhdGUgIT0gdHJ1ZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRPYmpbZWwubmFtZV0gPSBtb21lbnQoKS50b0RhdGUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKGVsLm5hbWUuaW5jbHVkZXMoXCJkYXRlX2Zyb21cIikgfHxcbiAgICAgICAgICAgICAgZWwubmFtZS5pbmNsdWRlcyhcInN0YXJ0ZnJvbVwiKSB8fFxuICAgICAgICAgICAgICBlbC5uYW1lLmluY2x1ZGVzKFwic3RhcnRfZGF0ZVwiKSB8fFxuICAgICAgICAgICAgICBlbC5uYW1lLmluY2x1ZGVzKFwic3RhcnRkYXRlXCIpIHx8XG4gICAgICAgICAgICAgIGVsLm5hbWUuaW5jbHVkZXMoXCJjcmVhdGVkXCIpKSAmJlxuICAgICAgICAgICAgZWwuaWdub3JlU3RhcnREYXRlICE9IHRydWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0T2JqW2VsLm5hbWVdID0gbW9tZW50KCkuc3RhcnRPZihcIm1vbnRoXCIpLnRvRGF0ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm91dHB1dE9ialtlbC5uYW1lXSA9IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJkcm9wZG93blwiOlxuICAgICAgICAgIGlmIChlbC5oaWRlQ2xlYXIpIHRoaXMub3V0cHV0T2JqW2VsLm5hbWVdID0gbnVsbDtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibW9udGhcIjpcbiAgICAgICAgICB0aGlzLm91dHB1dE9ialtlbC5uYW1lXSA9IG1vbWVudCgpLnN0YXJ0T2YoXCJtb250aFwiKS50b0RhdGUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm11bHRpU2VsZWN0XCI6XG4gICAgICAgICAgdGhpcy5vdXRwdXRPYmpbZWwubmFtZV0gPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMub3V0cHV0T2JqO1xuICB9XG59XG4iXX0=