import { Component, EventEmitter, Input, Output, } from "@angular/core";
import { OutputData } from "./View-Models/outputDataViewModel";
import * as moment from "moment/moment";
import { isArray } from "@apollo/client/cache/inmemory/helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "primeng/api";
import * as i5 from "primeng/multiselect";
import * as i6 from "primeng/calendar";
import * as i7 from "primeng/dropdown";
import * as i8 from "primeng/inputtext";
import * as i9 from "primeng/inputnumber";
import * as i10 from "primeng/autocomplete";
export class GenericFilterComponent {
    activatedRoute;
    router;
    inputs = [];
    filterOnStart = true;
    emptyFilter = true;
    filter = new EventEmitter();
    onDropDownChange = new EventEmitter();
    outputObj;
    outputObjCopy;
    queryParams;
    constructor(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
    }
    ngOnInit() {
        this.outputObj = new OutputData(this.inputs);
        console.log(this.outputObj);
        this.handleQueryParams();
        if (this.filterOnStart) {
            this.emitFilterData("");
        }
    }
    handleQueryParams() {
        this.queryParams = { ...this.activatedRoute.snapshot.queryParams };
        Object.keys(this.queryParams).forEach((param) => {
            //is number parse it
            if (!isNaN(this.queryParams[param])) {
                this.queryParams[param] = JSON.parse(this.queryParams[param]);
            }
            else if (isArray(this.queryParams[param])) {
                //prase numbers in array
                this.queryParams[param].forEach((element, index) => {
                    if (!isNaN(element)) {
                        this.queryParams[param][index] = parseInt(this.queryParams[param][index]);
                    }
                });
            }
        });
        if (this.queryParams.date_to) {
            this.queryParams.date_to = new Date(this.queryParams.date_to);
        }
        if (this.queryParams.date_from) {
            this.queryParams.date_from = new Date(this.queryParams.date_from);
        }
        this.outputObj = { ...this.queryParams };
    }
    deleteEmptyKeys(key) {
        delete this.outputObjCopy[key];
    }
    formatDates(i) {
        let currentDateValue = this.outputObjCopy[this.inputs[i].name];
        if (!currentDateValue) {
            let currentDateLabel = this.inputs[i].name;
            // Returns the first day of the month if the date from is undefined or null
            if ((currentDateLabel.includes("date_from") ||
                currentDateLabel.includes("startfrom") ||
                currentDateLabel.includes("start_date") ||
                currentDateLabel.includes("enddate") ||
                currentDateLabel.includes("created") ||
                currentDateLabel.includes("modified")) &&
                this.inputs[i].ignoreStartDate != true) {
                this.outputObjCopy[currentDateLabel] = moment()
                    .clone()
                    .startOf("month")
                    .format("YYYY-MM-DD");
            }
            // Returns the date of today if the date is undefined or null
            else if ((currentDateLabel.includes("date_to") ||
                currentDateLabel.includes("startto") ||
                currentDateLabel.includes("end_date") ||
                currentDateLabel.includes("startdate")) &&
                this.inputs[i].ignoreStartDate != true) {
                this.outputObjCopy[currentDateLabel] = moment()
                    .clone()
                    .format("YYYY-MM-DD");
            }
        }
        // Formats the date before sending it
        else {
            this.outputObjCopy[this.inputs[i].name] = moment(currentDateValue)
                .clone()
                .format("YYYY-MM-DD");
        }
    }
    emitFilterData(buttonType) {
        // Sets the output object copy
        this.handleFilterData();
        // Emits the manipulated filter object
        if (buttonType != "reset" &&
            !this.emptyFilter &&
            Object.values(this.outputObjCopy).length == 0) {
            //this.genericService.showNotification("error ", "يجب ان تحدد الفلتر", "");
        }
        else {
            this.filter.emit(this.outputObjCopy);
        }
        // Resets the output copy object
        this.outputObjCopy = this.outputObj;
    }
    handleFilterData() {
        this.outputObjCopy = { ...this.outputObj };
        Object.entries(this.inputs).forEach(([key, value], i) => {
            if (this.inputs[i].type == "date") {
                this.formatDates(i);
            }
            else if (this.inputs[i].type == "month") {
                this.outputObjCopy[this.inputs[i].name] = moment(this.outputObjCopy[this.inputs[i].name]).format("YYYY-MM");
            }
            if ((this.outputObjCopy[this.inputs[i].name] === null ||
                this.outputObjCopy[this.inputs[i].name] === undefined ||
                this.outputObjCopy[this.inputs[i].name] === "") &&
                this.inputs[i].type != "date") {
                this.deleteEmptyKeys(this.inputs[i].name);
            }
        });
        if (!this.outputObjCopy?.date_to &&
            "date_to" in this.outputObj &&
            this.outputObjCopy?.date_from) {
            this.outputObjCopy.date_to = moment().clone().format("YYYY-MM-DD");
        }
    }
    emitDropDownValue(object, id) {
        const data = {};
        data[`${id}`] = object.value || object;
        this.onDropDownChange.emit(data);
    }
    resetData() {
        this.outputObj = new OutputData(this.inputs);
        this.emitFilterData("reset");
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: GenericFilterComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.5", type: GenericFilterComponent, selector: "app-generic-filter", inputs: { inputs: "inputs", filterOnStart: "filterOnStart", emptyFilter: "emptyFilter" }, outputs: { filter: "filter", onDropDownChange: "onDropDownChange" }, ngImport: i0, template: "<div class=\"row\">\n  <div class=\"mt-3 col-md-4\" *ngFor=\"let input of inputs; let i = index\">\n    <div class=\"w-100\" [ngSwitch]=\"input.type\">\n      <input\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        pInputText\n        *ngSwitchCase=\"'text'\"\n        [type]=\"input.type\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n      />\n      <p-inputNumber\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        pInputNumber\n        *ngSwitchCase=\"'number'\"\n        [id]=\"input.name\"\n        [placeholder]=\"input!.placeholder!\"\n      ></p-inputNumber>\n      <input\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        pInputText\n        *ngSwitchCase=\"'tel'\"\n        [type]=\"input.type\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n      />\n      <!-- <p-dropdown [(ngModel)]=\"outputObj[input.name]\" class=\"w-100\" *ngSwitchCase=\"'dropdown'\" [id]=\"input.name\" [placeholder]=\"input.placeholder\" [options]=\"input.options\" [optionLabel]=\"input.label\" [optionValue]=\"input.value\" showClear=\"true\"></p-dropdown> -->\n\n      <p-dropdown\n        (onChange)=\"emitDropDownValue($event, input.name)\"\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        *ngSwitchCase=\"'dropdown'\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n        [options]=\"input.options\"\n        [optionLabel]=\"input.label\"\n        [optionValue]=\"input.value\"\n        [filter]=\"true\"\n        [filterBy]=\"input.label\"\n        [showClear]=\"!input.hideClear\"\n        [autoDisplayFirst]=\"input!.autoDisplayFirst!\"\n      >\n        <ng-template let-item pTemplate=\"item\">\n          <div>{{ item[input!.label!] }}</div>\n        </ng-template>\n      </p-dropdown>\n\n      <p-calendar\n        [(ngModel)]=\"outputObj[input.name]\"\n        *ngSwitchCase=\"'date'\"\n        [minDate]=\"input.name == 'date_to' ? outputObj['date_from'] : ''\"\n        [maxDate]=\"input.name == 'date_from' ? outputObj['date_to'] : ''\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n        dateFormat=\"dd-mm-yy\"\n      ></p-calendar>\n      <p-multiSelect\n        *ngSwitchCase=\"'multiSelect'\"\n        [id]=\"input.name\"\n        styleClass=\"w-100\"\n        [name]=\"input.name\"\n        ngDefaultControl\n        [(ngModel)]=\"outputObj[input.name]\"\n        (onChange)=\"emitDropDownValue($event, input.name)\"\n        [placeholder]=\"input.placeholder\"\n        [options]=\"input.options\"\n        [optionLabel]=\"input.label\"\n        [optionValue]=\"input.value\"\n        [showClear]=\"input.hideClear!\"\n        display=\"chip\"\n        [filter]=\"true\"\n        [filterBy]=\"input.label\"\n      >\n        <ng-template let-item pTemplate=\"item\">\n          <div>{{ item[input.label!] }}</div>\n        </ng-template>\n      </p-multiSelect>\n\n      <p-autoComplete\n        *ngSwitchCase=\"'search'\"\n        [(ngModel)]=\"outputObj[input.name]\"\n        (ngModelChange)=\"emitDropDownValue($event, input.name)\"\n        [suggestions]=\"input!.options!\"\n        [field]=\"input!.field!\"\n        [placeholder]=\"input!.placeholder!\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        styleClass=\"w-100\"\n      >\n      </p-autoComplete>\n      <p-inputNumber\n        *ngSwitchCase=\"'percintage'\"\n        [(ngModel)]=\"outputObj[input.name]\"\n        (ngModelChange)=\"emitDropDownValue($event, input.name)\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        styleClass=\"w-100\"\n        [id]=\"input.name\"\n        mode=\"currency\"\n        currency=\"EGP\"\n      >\n      </p-inputNumber>\n      <p-calendar\n        [(ngModel)]=\"outputObj[input.name]\"\n        *ngSwitchCase=\"'month'\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n        dateFormat=\"mm-yy\"\n        view=\"month\"\n      ></p-calendar>\n    </div>\n  </div>\n</div>\n<div class=\"row d-flex m-auto\">\n  <div class=\"col-md-4 mt-3 d-flex align-items-end\">\n    <button class=\"w-100 btn btn-success p-2\" (click)=\"emitFilterData('')\">\n      \u062A\u0635\u0641\u064A\u0629\n    </button>\n  </div>\n  <div class=\"col-md-4 mt-3 d-flex align-items-end\">\n    <button class=\"w-100 btn btn-secondary p-2\" (click)=\"resetData()\">\n      \u0625\u0639\u0627\u062F\u0629 \u0636\u0628\u0637\n    </button>\n  </div>\n  <!-- <div class=\"col-md-4 mt-3 d-flex align-items-end\">\n    <button\n      class=\"w-100 btn btn-info p-2\"\n      (click)=\"shareFilter()\"\n    >\n      \u0645\u0634\u0627\u0631\u0643\u0629 \u0627\u0644\u062A\u0635\u0641\u064A\u0629\n    </button>\n  </div> -->\n</div>\n", styles: ["::ng-deep .p-calendar,::ng-deep .p-inputtext,::ng-deep .p-inputnumber,::ng-deep .p-dropdown{width:100%}::ng-deep .p-slider{margin-top:.75rem}::ng-deep .p-autocomplete .p-autocomplete-loader{right:unset;left:.75rem}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i5.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }, { kind: "component", type: i6.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "showClear", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "touchUI", "timeSeparator", "focusTrap", "showTransitionOptions", "hideTransitionOptions", "tabindex", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "responsiveOptions", "numberOfMonths", "firstDayOfWeek", "locale", "view", "defaultDate"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onClear", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }, { kind: "component", type: i7.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "overlayDirection", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "directive", type: i8.InputText, selector: "[pInputText]" }, { kind: "component", type: i9.InputNumber, selector: "p-inputNumber", inputs: ["showButtons", "format", "buttonLayout", "inputId", "styleClass", "style", "placeholder", "size", "maxlength", "tabindex", "title", "ariaLabel", "ariaRequired", "name", "required", "autocomplete", "min", "max", "incrementButtonClass", "decrementButtonClass", "incrementButtonIcon", "decrementButtonIcon", "readonly", "step", "allowEmpty", "locale", "localeMatcher", "mode", "currency", "currencyDisplay", "useGrouping", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "inputStyle", "inputStyleClass", "showClear", "disabled"], outputs: ["onInput", "onFocus", "onBlur", "onKeyDown", "onClear"] }, { kind: "component", type: i10.AutoComplete, selector: "p-autoComplete", inputs: ["minLength", "delay", "style", "panelStyle", "styleClass", "panelStyleClass", "inputStyle", "inputId", "inputStyleClass", "placeholder", "readonly", "disabled", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "maxlength", "name", "required", "size", "appendTo", "autoHighlight", "forceSelection", "type", "autoZIndex", "baseZIndex", "ariaLabel", "dropdownAriaLabel", "ariaLabelledBy", "dropdownIcon", "unique", "group", "completeOnFocus", "showClear", "field", "dropdown", "showEmptyMessage", "dropdownMode", "multiple", "tabindex", "dataKey", "emptyMessage", "showTransitionOptions", "hideTransitionOptions", "autofocus", "autocomplete", "optionGroupChildren", "optionGroupLabel", "overlayOptions", "suggestions", "itemSize"], outputs: ["completeMethod", "onSelect", "onUnselect", "onFocus", "onBlur", "onDropdownClick", "onClear", "onKeyUp", "onShow", "onHide", "onLazyLoad"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: GenericFilterComponent, decorators: [{
            type: Component,
            args: [{ selector: "app-generic-filter", template: "<div class=\"row\">\n  <div class=\"mt-3 col-md-4\" *ngFor=\"let input of inputs; let i = index\">\n    <div class=\"w-100\" [ngSwitch]=\"input.type\">\n      <input\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        pInputText\n        *ngSwitchCase=\"'text'\"\n        [type]=\"input.type\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n      />\n      <p-inputNumber\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        pInputNumber\n        *ngSwitchCase=\"'number'\"\n        [id]=\"input.name\"\n        [placeholder]=\"input!.placeholder!\"\n      ></p-inputNumber>\n      <input\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        pInputText\n        *ngSwitchCase=\"'tel'\"\n        [type]=\"input.type\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n      />\n      <!-- <p-dropdown [(ngModel)]=\"outputObj[input.name]\" class=\"w-100\" *ngSwitchCase=\"'dropdown'\" [id]=\"input.name\" [placeholder]=\"input.placeholder\" [options]=\"input.options\" [optionLabel]=\"input.label\" [optionValue]=\"input.value\" showClear=\"true\"></p-dropdown> -->\n\n      <p-dropdown\n        (onChange)=\"emitDropDownValue($event, input.name)\"\n        [(ngModel)]=\"outputObj[input.name]\"\n        class=\"w-100\"\n        *ngSwitchCase=\"'dropdown'\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n        [options]=\"input.options\"\n        [optionLabel]=\"input.label\"\n        [optionValue]=\"input.value\"\n        [filter]=\"true\"\n        [filterBy]=\"input.label\"\n        [showClear]=\"!input.hideClear\"\n        [autoDisplayFirst]=\"input!.autoDisplayFirst!\"\n      >\n        <ng-template let-item pTemplate=\"item\">\n          <div>{{ item[input!.label!] }}</div>\n        </ng-template>\n      </p-dropdown>\n\n      <p-calendar\n        [(ngModel)]=\"outputObj[input.name]\"\n        *ngSwitchCase=\"'date'\"\n        [minDate]=\"input.name == 'date_to' ? outputObj['date_from'] : ''\"\n        [maxDate]=\"input.name == 'date_from' ? outputObj['date_to'] : ''\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n        dateFormat=\"dd-mm-yy\"\n      ></p-calendar>\n      <p-multiSelect\n        *ngSwitchCase=\"'multiSelect'\"\n        [id]=\"input.name\"\n        styleClass=\"w-100\"\n        [name]=\"input.name\"\n        ngDefaultControl\n        [(ngModel)]=\"outputObj[input.name]\"\n        (onChange)=\"emitDropDownValue($event, input.name)\"\n        [placeholder]=\"input.placeholder\"\n        [options]=\"input.options\"\n        [optionLabel]=\"input.label\"\n        [optionValue]=\"input.value\"\n        [showClear]=\"input.hideClear!\"\n        display=\"chip\"\n        [filter]=\"true\"\n        [filterBy]=\"input.label\"\n      >\n        <ng-template let-item pTemplate=\"item\">\n          <div>{{ item[input.label!] }}</div>\n        </ng-template>\n      </p-multiSelect>\n\n      <p-autoComplete\n        *ngSwitchCase=\"'search'\"\n        [(ngModel)]=\"outputObj[input.name]\"\n        (ngModelChange)=\"emitDropDownValue($event, input.name)\"\n        [suggestions]=\"input!.options!\"\n        [field]=\"input!.field!\"\n        [placeholder]=\"input!.placeholder!\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        styleClass=\"w-100\"\n      >\n      </p-autoComplete>\n      <p-inputNumber\n        *ngSwitchCase=\"'percintage'\"\n        [(ngModel)]=\"outputObj[input.name]\"\n        (ngModelChange)=\"emitDropDownValue($event, input.name)\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        styleClass=\"w-100\"\n        [id]=\"input.name\"\n        mode=\"currency\"\n        currency=\"EGP\"\n      >\n      </p-inputNumber>\n      <p-calendar\n        [(ngModel)]=\"outputObj[input.name]\"\n        *ngSwitchCase=\"'month'\"\n        [id]=\"input.name\"\n        [placeholder]=\"input.placeholder\"\n        dateFormat=\"mm-yy\"\n        view=\"month\"\n      ></p-calendar>\n    </div>\n  </div>\n</div>\n<div class=\"row d-flex m-auto\">\n  <div class=\"col-md-4 mt-3 d-flex align-items-end\">\n    <button class=\"w-100 btn btn-success p-2\" (click)=\"emitFilterData('')\">\n      \u062A\u0635\u0641\u064A\u0629\n    </button>\n  </div>\n  <div class=\"col-md-4 mt-3 d-flex align-items-end\">\n    <button class=\"w-100 btn btn-secondary p-2\" (click)=\"resetData()\">\n      \u0625\u0639\u0627\u062F\u0629 \u0636\u0628\u0637\n    </button>\n  </div>\n  <!-- <div class=\"col-md-4 mt-3 d-flex align-items-end\">\n    <button\n      class=\"w-100 btn btn-info p-2\"\n      (click)=\"shareFilter()\"\n    >\n      \u0645\u0634\u0627\u0631\u0643\u0629 \u0627\u0644\u062A\u0635\u0641\u064A\u0629\n    </button>\n  </div> -->\n</div>\n", styles: ["::ng-deep .p-calendar,::ng-deep .p-inputtext,::ng-deep .p-inputnumber,::ng-deep .p-dropdown{width:100%}::ng-deep .p-slider{margin-top:.75rem}::ng-deep .p-autocomplete .p-autocomplete-loader{right:unset;left:.75rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; }, propDecorators: { inputs: [{
                type: Input
            }], filterOnStart: [{
                type: Input,
                args: ["filterOnStart"]
            }], emptyFilter: [{
                type: Input,
                args: ["emptyFilter"]
            }], filter: [{
                type: Output
            }], onDropDownChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,